// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/names.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Streaming {
  public static partial class NameStream
  {
    static readonly string __ServiceName = "streaming.NameStream";

    static readonly grpc::Marshaller<global::Streaming.Task> __Marshaller_streaming_Task = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streaming.Task.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streaming.NameMessage> __Marshaller_streaming_NameMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streaming.NameMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::Streaming.Task, global::Streaming.NameMessage> __Method_subscribeChannel = new grpc::Method<global::Streaming.Task, global::Streaming.NameMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribeChannel",
        __Marshaller_streaming_Task,
        __Marshaller_streaming_NameMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Streaming.NamesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NameStream</summary>
    [grpc::BindServiceMethod(typeof(NameStream), "BindService")]
    public abstract partial class NameStreamBase
    {
      public virtual global::System.Threading.Tasks.Task subscribeChannel(global::Streaming.Task request, grpc::IServerStreamWriter<global::Streaming.NameMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NameStream</summary>
    public partial class NameStreamClient : grpc::ClientBase<NameStreamClient>
    {
      /// <summary>Creates a new client for NameStream</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NameStreamClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NameStream that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NameStreamClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NameStreamClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NameStreamClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Streaming.NameMessage> subscribeChannel(global::Streaming.Task request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribeChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Streaming.NameMessage> subscribeChannel(global::Streaming.Task request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeChannel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NameStreamClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NameStreamClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NameStreamBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_subscribeChannel, serviceImpl.subscribeChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NameStreamBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_subscribeChannel, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Streaming.Task, global::Streaming.NameMessage>(serviceImpl.subscribeChannel));
    }

  }
}
#endregion
