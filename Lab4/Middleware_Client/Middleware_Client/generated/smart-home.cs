//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `smart-home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Smart
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public enum heatingMode
    {
        OFF,
        ON,
        HOLIDAY
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class heatingModeHelper
    {
        public static void write(global::Ice.OutputStream ostr, heatingMode v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static heatingMode read(global::Ice.InputStream istr)
        {
            heatingMode v;
            v = (heatingMode)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct cameraPosition
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float pan;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float tilt;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float zoom;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public cameraPosition(float pan, float tilt, float zoom)
        {
            this.pan = pan;
            this.tilt = tilt;
            this.zoom = zoom;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Smart::cameraPosition");
            global::IceInternal.HashUtil.hashAdd(ref h_, pan);
            global::IceInternal.HashUtil.hashAdd(ref h_, tilt);
            global::IceInternal.HashUtil.hashAdd(ref h_, zoom);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is cameraPosition))
            {
                return false;
            }
            cameraPosition o = (cameraPosition)other;
            if(!this.pan.Equals(o.pan))
            {
                return false;
            }
            if(!this.tilt.Equals(o.tilt))
            {
                return false;
            }
            if(!this.zoom.Equals(o.zoom))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(cameraPosition lhs, cameraPosition rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(cameraPosition lhs, cameraPosition rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.pan);
            ostr.writeFloat(this.tilt);
            ostr.writeFloat(this.zoom);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.pan = istr.readFloat();
            this.tilt = istr.readFloat();
            this.zoom = istr.readFloat();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, cameraPosition v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static cameraPosition ice_read(global::Ice.InputStream istr)
        {
            var v = new cameraPosition();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct weatherData
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float temperature;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float humidity;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public int pressure;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public weatherData(float temperature, float humidity, int pressure)
        {
            this.temperature = temperature;
            this.humidity = humidity;
            this.pressure = pressure;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Smart::weatherData");
            global::IceInternal.HashUtil.hashAdd(ref h_, temperature);
            global::IceInternal.HashUtil.hashAdd(ref h_, humidity);
            global::IceInternal.HashUtil.hashAdd(ref h_, pressure);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is weatherData))
            {
                return false;
            }
            weatherData o = (weatherData)other;
            if(!this.temperature.Equals(o.temperature))
            {
                return false;
            }
            if(!this.humidity.Equals(o.humidity))
            {
                return false;
            }
            if(!this.pressure.Equals(o.pressure))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(weatherData lhs, weatherData rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(weatherData lhs, weatherData rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.temperature);
            ostr.writeFloat(this.humidity);
            ostr.writeInt(this.pressure);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.temperature = istr.readFloat();
            this.humidity = istr.readFloat();
            this.pressure = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, weatherData v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static weatherData ice_read(global::Ice.InputStream istr)
        {
            var v = new weatherData();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct errorCode
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public int code;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public int count;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public errorCode(int code, int count)
        {
            this.code = code;
            this.count = count;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Smart::errorCode");
            global::IceInternal.HashUtil.hashAdd(ref h_, code);
            global::IceInternal.HashUtil.hashAdd(ref h_, count);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is errorCode))
            {
                return false;
            }
            errorCode o = (errorCode)other;
            if(!this.code.Equals(o.code))
            {
                return false;
            }
            if(!this.count.Equals(o.count))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(errorCode lhs, errorCode rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(errorCode lhs, errorCode rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.code);
            ostr.writeInt(this.count);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.code = istr.readInt();
            this.count = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, errorCode v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static errorCode ice_read(global::Ice.InputStream istr)
        {
            var v = new errorCode();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ArgumentOutOfRangeException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public string argumentName;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float expectedMinimum;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float expectedMaximum;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        private void _initDM()
        {
            this.argumentName = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public ArgumentOutOfRangeException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public ArgumentOutOfRangeException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public ArgumentOutOfRangeException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.argumentName = info.GetString("argumentName");
            this.expectedMinimum = info.GetSingle("expectedMinimum");
            this.expectedMaximum = info.GetSingle("expectedMaximum");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        private void _initDM(string argumentName, float expectedMinimum, float expectedMaximum)
        {
            this.argumentName = argumentName;
            this.expectedMinimum = expectedMinimum;
            this.expectedMaximum = expectedMaximum;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public ArgumentOutOfRangeException(string argumentName, float expectedMinimum, float expectedMaximum)
        {
            _initDM(argumentName, expectedMinimum, expectedMaximum);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public ArgumentOutOfRangeException(string argumentName, float expectedMinimum, float expectedMaximum, global::System.Exception ex) : base(ex)
        {
            _initDM(argumentName, expectedMinimum, expectedMaximum);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override string ice_id()
        {
            return "::Smart::ArgumentOutOfRangeException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Smart::ArgumentOutOfRangeException");
            global::IceInternal.HashUtil.hashAdd(ref h_, argumentName);
            global::IceInternal.HashUtil.hashAdd(ref h_, expectedMinimum);
            global::IceInternal.HashUtil.hashAdd(ref h_, expectedMaximum);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            ArgumentOutOfRangeException o = other as ArgumentOutOfRangeException;
            if(o == null)
            {
                return false;
            }
            if(this.argumentName == null)
            {
                if(o.argumentName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.argumentName.Equals(o.argumentName))
                {
                    return false;
                }
            }
            if(!this.expectedMinimum.Equals(o.expectedMinimum))
            {
                return false;
            }
            if(!this.expectedMaximum.Equals(o.expectedMaximum))
            {
                return false;
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("argumentName", this.argumentName == null ? "" : this.argumentName);
            info.AddValue("expectedMinimum", this.expectedMinimum);
            info.AddValue("expectedMaximum", this.expectedMaximum);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(ArgumentOutOfRangeException lhs, ArgumentOutOfRangeException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(ArgumentOutOfRangeException lhs, ArgumentOutOfRangeException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Smart::ArgumentOutOfRangeException", -1, true);
            ostr_.writeString(argumentName);
            ostr_.writeFloat(expectedMinimum);
            ostr_.writeFloat(expectedMaximum);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            argumentName = istr_.readString();
            expectedMinimum = istr_.readFloat();
            expectedMaximum = istr_.readFloat();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Device : global::Ice.Object, DeviceOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface WeatherStation : global::Ice.Object, WeatherStationOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CentralHeating : global::Ice.Object, CentralHeatingOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Camera : global::Ice.Object, CameraOperations_, Device
    {
    }
}

namespace Smart
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Device_getErrorCodes(errorCode[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Device_resetErrorCodes();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_WeatherStation_getTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_WeatherStation_getHumidity(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_WeatherStation_getPressure(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_WeatherStation_getWeatherData(weatherData ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_WeatherStation_getDailyWeather(global::System.Collections.Generic.Dictionary<string, weatherData> ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_CentralHeating_setTemperature();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_CentralHeating_getDesiredTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_CentralHeating_setHeatingMode();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_CentralHeating_getHeatingMode(heatingMode ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Camera_setPosition(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Camera_getPosition(cameraPosition ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Camera_getLocked(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Camera_setLocked();
}

namespace Smart
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface DevicePrx : global::Ice.ObjectPrx
    {
        errorCode[] getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<errorCode[]> getErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getErrorCodes(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        errorCode[] end_getErrorCodes(global::Ice.AsyncResult asyncResult);

        void resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task resetErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_resetErrorCodes(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface WeatherStationPrx : DevicePrx
    {
        float getTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_WeatherStation_getTemperature> begin_getTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTemperature(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getTemperature(global::Ice.AsyncResult asyncResult);

        float getHumidity(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getHumidityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_WeatherStation_getHumidity> begin_getHumidity(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getHumidity(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getHumidity(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getHumidity(global::Ice.AsyncResult asyncResult);

        int getPressure(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> getPressureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_WeatherStation_getPressure> begin_getPressure(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getPressure(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getPressure(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_getPressure(global::Ice.AsyncResult asyncResult);

        weatherData getWeatherData(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<weatherData> getWeatherDataAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_WeatherStation_getWeatherData> begin_getWeatherData(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getWeatherData(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getWeatherData(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        weatherData end_getWeatherData(global::Ice.AsyncResult asyncResult);

        global::System.Collections.Generic.Dictionary<string, weatherData> getDailyWeather(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, weatherData>> getDailyWeatherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_WeatherStation_getDailyWeather> begin_getDailyWeather(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDailyWeather(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDailyWeather(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::System.Collections.Generic.Dictionary<string, weatherData> end_getDailyWeather(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CentralHeatingPrx : DevicePrx
    {
        void setTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CentralHeating_setTemperature> begin_setTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setTemperature(global::Ice.AsyncResult asyncResult);

        float getDesiredTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getDesiredTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CentralHeating_getDesiredTemperature> begin_getDesiredTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDesiredTemperature(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDesiredTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getDesiredTemperature(global::Ice.AsyncResult asyncResult);

        void setHeatingMode(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setHeatingModeAsync(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CentralHeating_setHeatingMode> begin_setHeatingMode(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setHeatingMode(heatingMode mode, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setHeatingMode(heatingMode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setHeatingMode(global::Ice.AsyncResult asyncResult);

        heatingMode getHeatingMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<heatingMode> getHeatingModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CentralHeating_getHeatingMode> begin_getHeatingMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getHeatingMode(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getHeatingMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        heatingMode end_getHeatingMode(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CameraPrx : DevicePrx
    {
        bool setPosition(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setPositionAsync(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Camera_setPosition> begin_setPosition(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setPosition(cameraPosition position, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setPosition(cameraPosition position, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setPosition(global::Ice.AsyncResult asyncResult);

        cameraPosition getPosition(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<cameraPosition> getPositionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Camera_getPosition> begin_getPosition(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getPosition(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getPosition(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        cameraPosition end_getPosition(global::Ice.AsyncResult asyncResult);

        bool getLocked(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> getLockedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Camera_getLocked> begin_getLocked(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getLocked(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getLocked(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_getLocked(global::Ice.AsyncResult asyncResult);

        void setLocked(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setLockedAsync(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Camera_setLocked> begin_setLocked(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setLocked(bool locked, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setLocked(bool locked, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setLocked(global::Ice.AsyncResult asyncResult);
    }
}

namespace Smart
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        errorCode[] getErrorCodes(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        void resetErrorCodes(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface WeatherStationOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getTemperature(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getHumidity(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int getPressure(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        weatherData getWeatherData(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        global::System.Collections.Generic.Dictionary<string, weatherData> getDailyWeather(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CentralHeatingOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        void setTemperature(float temperature, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getDesiredTemperature(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        void setHeatingMode(heatingMode mode, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        heatingMode getHeatingMode(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CameraOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        bool setPosition(cameraPosition position, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        cameraPosition getPosition(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        bool getLocked(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        void setLocked(bool locked, global::Ice.Current current = null);
    }
}

namespace Smart
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class dailyWeatherHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, weatherData> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, weatherData> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, weatherData> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, weatherData> r = new global::System.Collections.Generic.Dictionary<string, weatherData>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                weatherData v;
                v = new weatherData();
                v.ice_readMembers(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class errorCodesHelper
    {
        public static void write(global::Ice.OutputStream ostr, errorCode[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static errorCode[] read(global::Ice.InputStream istr)
        {
            errorCode[] v;
            {
                int szx = istr.readAndCheckSeqSize(8);
                v = new errorCode[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class DevicePrxHelper : global::Ice.ObjectPrxHelperBase, DevicePrx
    {
        public DevicePrxHelper()
        {
        }

        public DevicePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public errorCode[] getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resetErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<errorCode[]> getErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<errorCode[]> _iceI_getErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<errorCode[]>(progress, cancel);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getErrorCodes_name = "getErrorCodes";

        private void _iceI_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<errorCode[]>(completed);
            outAsync.invoke(
                _getErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    errorCode[] ret;
                    ret = errorCodesHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task resetErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resetErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resetErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _resetErrorCodes_name = "resetErrorCodes";

        private void _iceI_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resetErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(context, callback, cookie, false);
        }

        public errorCode[] end_getErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getErrorCodes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<errorCode[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_getErrorCodes, errorCode[]>(
                (Callback_Device_getErrorCodes cb, errorCode[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getErrorCodes_name, cookie, completedCallback);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resetErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(context, callback, cookie, false);
        }

        public void end_resetErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resetErrorCodes_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_resetErrorCodes, object>(
                (Callback_Device_resetErrorCodes cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resetErrorCodes_name, cookie, completedCallback);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper h = new DevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DevicePrxHelper h = new DevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DevicePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if(r == null)
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DevicePrxHelper h = new DevicePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Device"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DevicePrx v)
        {
            ostr.writeProxy(v);
        }

        public static DevicePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DevicePrxHelper result = new DevicePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class WeatherStationPrxHelper : global::Ice.ObjectPrxHelperBase, WeatherStationPrx
    {
        public WeatherStationPrxHelper()
        {
        }

        public WeatherStationPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public errorCode[] getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resetErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getHumidity(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getHumidityAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getPressure(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getPressureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public weatherData getWeatherData(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getWeatherDataAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, weatherData> getDailyWeather(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDailyWeatherAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<errorCode[]> getErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<errorCode[]> _iceI_getErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<errorCode[]>(progress, cancel);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getErrorCodes_name = "getErrorCodes";

        private void _iceI_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<errorCode[]>(completed);
            outAsync.invoke(
                _getErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    errorCode[] ret;
                    ret = errorCodesHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task resetErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resetErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resetErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _resetErrorCodes_name = "resetErrorCodes";

        private void _iceI_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resetErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<float> getTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTemperature_name = "getTemperature";

        private void _iceI_getTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getHumidityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getHumidityAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getHumidityAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getHumidity_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getHumidity(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getHumidity_name = "getHumidity";

        private void _iceI_getHumidity(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getHumidity_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getPressureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getPressureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getPressureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPressure_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getPressure(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPressure_name = "getPressure";

        private void _iceI_getPressure(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getPressure_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<weatherData> getWeatherDataAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getWeatherDataAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<weatherData> _iceI_getWeatherDataAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getWeatherData_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<weatherData>(progress, cancel);
            _iceI_getWeatherData(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getWeatherData_name = "getWeatherData";

        private void _iceI_getWeatherData(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<weatherData>(completed);
            outAsync.invoke(
                _getWeatherData_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    weatherData ret = new weatherData();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, weatherData>> getDailyWeatherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDailyWeatherAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, weatherData>> _iceI_getDailyWeatherAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDailyWeather_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, weatherData>>(progress, cancel);
            _iceI_getDailyWeather(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDailyWeather_name = "getDailyWeather";

        private void _iceI_getDailyWeather(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, weatherData>>(completed);
            outAsync.invoke(
                _getDailyWeather_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, weatherData> ret;
                    ret = dailyWeatherHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(context, callback, cookie, false);
        }

        public errorCode[] end_getErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getErrorCodes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<errorCode[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_getErrorCodes, errorCode[]>(
                (Callback_Device_getErrorCodes cb, errorCode[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getErrorCodes_name, cookie, completedCallback);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resetErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(context, callback, cookie, false);
        }

        public void end_resetErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resetErrorCodes_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_resetErrorCodes, object>(
                (Callback_Device_resetErrorCodes cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resetErrorCodes_name, cookie, completedCallback);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_WeatherStation_getTemperature> begin_getTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTemperature(context, callback, cookie, false);
        }

        public float end_getTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_WeatherStation_getTemperature> begin_getTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WeatherStation_getTemperature, float>(
                (Callback_WeatherStation_getTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTemperature_name, cookie, completedCallback);
            _iceI_getTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_WeatherStation_getHumidity> begin_getHumidity(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getHumidity(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getHumidity(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getHumidity(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getHumidity(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getHumidity(context, callback, cookie, false);
        }

        public float end_getHumidity(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHumidity_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_WeatherStation_getHumidity> begin_getHumidity(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getHumidity_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WeatherStation_getHumidity, float>(
                (Callback_WeatherStation_getHumidity cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getHumidity_name, cookie, completedCallback);
            _iceI_getHumidity(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_WeatherStation_getPressure> begin_getPressure(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getPressure(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getPressure(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPressure(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getPressure(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPressure(context, callback, cookie, false);
        }

        public int end_getPressure(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPressure_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_WeatherStation_getPressure> begin_getPressure(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getPressure_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WeatherStation_getPressure, int>(
                (Callback_WeatherStation_getPressure cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getPressure_name, cookie, completedCallback);
            _iceI_getPressure(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_WeatherStation_getWeatherData> begin_getWeatherData(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getWeatherData(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getWeatherData(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getWeatherData(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getWeatherData(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getWeatherData(context, callback, cookie, false);
        }

        public weatherData end_getWeatherData(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getWeatherData_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<weatherData>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_WeatherStation_getWeatherData> begin_getWeatherData(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getWeatherData_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WeatherStation_getWeatherData, weatherData>(
                (Callback_WeatherStation_getWeatherData cb, weatherData ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getWeatherData_name, cookie, completedCallback);
            _iceI_getWeatherData(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_WeatherStation_getDailyWeather> begin_getDailyWeather(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDailyWeather(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDailyWeather(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDailyWeather(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDailyWeather(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDailyWeather(context, callback, cookie, false);
        }

        public global::System.Collections.Generic.Dictionary<string, weatherData> end_getDailyWeather(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDailyWeather_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, weatherData>>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_WeatherStation_getDailyWeather> begin_getDailyWeather(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDailyWeather_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WeatherStation_getDailyWeather, global::System.Collections.Generic.Dictionary<string, weatherData>>(
                (Callback_WeatherStation_getDailyWeather cb, global::System.Collections.Generic.Dictionary<string, weatherData> ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDailyWeather_name, cookie, completedCallback);
            _iceI_getDailyWeather(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WeatherStationPrx r = b as WeatherStationPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            WeatherStationPrx r = b as WeatherStationPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WeatherStationPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WeatherStationPrx r = b as WeatherStationPrx;
            if(r == null)
            {
                WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static WeatherStationPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            WeatherStationPrxHelper h = new WeatherStationPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Device",
            "::Smart::WeatherStation"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, WeatherStationPrx v)
        {
            ostr.writeProxy(v);
        }

        public static WeatherStationPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                WeatherStationPrxHelper result = new WeatherStationPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class CentralHeatingPrxHelper : global::Ice.ObjectPrxHelperBase, CentralHeatingPrx
    {
        public CentralHeatingPrxHelper()
        {
        }

        public CentralHeatingPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public errorCode[] getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resetErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setTemperatureAsync(temperature, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getDesiredTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDesiredTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setHeatingMode(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setHeatingModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public heatingMode getHeatingMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getHeatingModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<errorCode[]> getErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<errorCode[]> _iceI_getErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<errorCode[]>(progress, cancel);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getErrorCodes_name = "getErrorCodes";

        private void _iceI_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<errorCode[]>(completed);
            outAsync.invoke(
                _getErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    errorCode[] ret;
                    ret = errorCodesHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task resetErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resetErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resetErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _resetErrorCodes_name = "resetErrorCodes";

        private void _iceI_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resetErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task setTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setTemperatureAsync(temperature, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setTemperatureAsync(float iceP_temperature, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setTemperature(iceP_temperature, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setTemperature_name = "setTemperature";

        private void _iceI_setTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_temperature);
                });
        }

        public global::System.Threading.Tasks.Task<float> getDesiredTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDesiredTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getDesiredTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDesiredTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getDesiredTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDesiredTemperature_name = "getDesiredTemperature";

        private void _iceI_getDesiredTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getDesiredTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setHeatingModeAsync(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setHeatingModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setHeatingModeAsync(heatingMode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setHeatingMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setHeatingMode_name = "setHeatingMode";

        private void _iceI_setHeatingMode(heatingMode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setHeatingMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 2);
                });
        }

        public global::System.Threading.Tasks.Task<heatingMode> getHeatingModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getHeatingModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<heatingMode> _iceI_getHeatingModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getHeatingMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<heatingMode>(progress, cancel);
            _iceI_getHeatingMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getHeatingMode_name = "getHeatingMode";

        private void _iceI_getHeatingMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<heatingMode>(completed);
            outAsync.invoke(
                _getHeatingMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    heatingMode ret;
                    ret = (heatingMode)istr.readEnum(2);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(context, callback, cookie, false);
        }

        public errorCode[] end_getErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getErrorCodes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<errorCode[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_getErrorCodes, errorCode[]>(
                (Callback_Device_getErrorCodes cb, errorCode[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getErrorCodes_name, cookie, completedCallback);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resetErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(context, callback, cookie, false);
        }

        public void end_resetErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resetErrorCodes_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_resetErrorCodes, object>(
                (Callback_Device_resetErrorCodes cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resetErrorCodes_name, cookie, completedCallback);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CentralHeating_setTemperature> begin_setTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setTemperature(temperature, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTemperature(temperature, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTemperature(temperature, context, callback, cookie, false);
        }

        public void end_setTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setTemperature_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CentralHeating_setTemperature> begin_setTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CentralHeating_setTemperature, object>(
                (Callback_CentralHeating_setTemperature cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setTemperature_name, cookie, completedCallback);
            _iceI_setTemperature(iceP_temperature, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CentralHeating_getDesiredTemperature> begin_getDesiredTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDesiredTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDesiredTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDesiredTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDesiredTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDesiredTemperature(context, callback, cookie, false);
        }

        public float end_getDesiredTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDesiredTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CentralHeating_getDesiredTemperature> begin_getDesiredTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDesiredTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CentralHeating_getDesiredTemperature, float>(
                (Callback_CentralHeating_getDesiredTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDesiredTemperature_name, cookie, completedCallback);
            _iceI_getDesiredTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CentralHeating_setHeatingMode> begin_setHeatingMode(heatingMode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setHeatingMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setHeatingMode(heatingMode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setHeatingMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setHeatingMode(heatingMode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setHeatingMode(mode, context, callback, cookie, false);
        }

        public void end_setHeatingMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setHeatingMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CentralHeating_setHeatingMode> begin_setHeatingMode(heatingMode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CentralHeating_setHeatingMode, object>(
                (Callback_CentralHeating_setHeatingMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setHeatingMode_name, cookie, completedCallback);
            _iceI_setHeatingMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CentralHeating_getHeatingMode> begin_getHeatingMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getHeatingMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getHeatingMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getHeatingMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getHeatingMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getHeatingMode(context, callback, cookie, false);
        }

        public heatingMode end_getHeatingMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHeatingMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<heatingMode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CentralHeating_getHeatingMode> begin_getHeatingMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getHeatingMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CentralHeating_getHeatingMode, heatingMode>(
                (Callback_CentralHeating_getHeatingMode cb, heatingMode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getHeatingMode_name, cookie, completedCallback);
            _iceI_getHeatingMode(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CentralHeatingPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CentralHeatingPrx r = b as CentralHeatingPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CentralHeatingPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CentralHeatingPrx r = b as CentralHeatingPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CentralHeatingPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CentralHeatingPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CentralHeatingPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CentralHeatingPrx r = b as CentralHeatingPrx;
            if(r == null)
            {
                CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CentralHeatingPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CentralHeatingPrxHelper h = new CentralHeatingPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::CentralHeating",
            "::Smart::Device"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CentralHeatingPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CentralHeatingPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CentralHeatingPrxHelper result = new CentralHeatingPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class CameraPrxHelper : global::Ice.ObjectPrxHelperBase, CameraPrx
    {
        public CameraPrxHelper()
        {
        }

        public CameraPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public errorCode[] getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resetErrorCodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setPosition(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setPositionAsync(position, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public cameraPosition getPosition(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getPositionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool getLocked(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getLockedAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setLocked(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setLockedAsync(locked, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<errorCode[]> getErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<errorCode[]> _iceI_getErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<errorCode[]>(progress, cancel);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getErrorCodes_name = "getErrorCodes";

        private void _iceI_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<errorCode[]>(completed);
            outAsync.invoke(
                _getErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    errorCode[] ret;
                    ret = errorCodesHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task resetErrorCodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resetErrorCodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resetErrorCodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _resetErrorCodes_name = "resetErrorCodes";

        private void _iceI_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resetErrorCodes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> setPositionAsync(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setPositionAsync(position, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setPositionAsync(cameraPosition iceP_position, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setPosition_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setPosition(iceP_position, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setPosition_name = "setPosition";

        private void _iceI_setPosition(cameraPosition iceP_position, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setPosition_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_position.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ArgumentOutOfRangeException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<cameraPosition> getPositionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getPositionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<cameraPosition> _iceI_getPositionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPosition_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<cameraPosition>(progress, cancel);
            _iceI_getPosition(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPosition_name = "getPosition";

        private void _iceI_getPosition(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<cameraPosition>(completed);
            outAsync.invoke(
                _getPosition_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    cameraPosition ret = new cameraPosition();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> getLockedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLockedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_getLockedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocked_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_getLocked(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocked_name = "getLocked";

        private void _iceI_getLocked(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _getLocked_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setLockedAsync(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setLockedAsync(locked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setLockedAsync(bool iceP_locked, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setLocked(iceP_locked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setLocked_name = "setLocked";

        private void _iceI_setLocked(bool iceP_locked, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setLocked_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_locked);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getErrorCodes(context, callback, cookie, false);
        }

        public errorCode[] end_getErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getErrorCodes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<errorCode[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_getErrorCodes> begin_getErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getErrorCodes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_getErrorCodes, errorCode[]>(
                (Callback_Device_getErrorCodes cb, errorCode[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getErrorCodes_name, cookie, completedCallback);
            _iceI_getErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resetErrorCodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resetErrorCodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resetErrorCodes(context, callback, cookie, false);
        }

        public void end_resetErrorCodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resetErrorCodes_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_resetErrorCodes> begin_resetErrorCodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_resetErrorCodes, object>(
                (Callback_Device_resetErrorCodes cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resetErrorCodes_name, cookie, completedCallback);
            _iceI_resetErrorCodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Camera_setPosition> begin_setPosition(cameraPosition position, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setPosition(position, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setPosition(cameraPosition position, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setPosition(position, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setPosition(cameraPosition position, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setPosition(position, context, callback, cookie, false);
        }

        public bool end_setPosition(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setPosition_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Camera_setPosition> begin_setPosition(cameraPosition iceP_position, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setPosition_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Camera_setPosition, bool>(
                (Callback_Camera_setPosition cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setPosition_name, cookie, completedCallback);
            _iceI_setPosition(iceP_position, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Camera_getPosition> begin_getPosition(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getPosition(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getPosition(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPosition(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getPosition(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPosition(context, callback, cookie, false);
        }

        public cameraPosition end_getPosition(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPosition_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<cameraPosition>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Camera_getPosition> begin_getPosition(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getPosition_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Camera_getPosition, cameraPosition>(
                (Callback_Camera_getPosition cb, cameraPosition ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getPosition_name, cookie, completedCallback);
            _iceI_getPosition(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Camera_getLocked> begin_getLocked(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getLocked(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getLocked(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocked(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getLocked(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocked(context, callback, cookie, false);
        }

        public bool end_getLocked(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLocked_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Camera_getLocked> begin_getLocked(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getLocked_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Camera_getLocked, bool>(
                (Callback_Camera_getLocked cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getLocked_name, cookie, completedCallback);
            _iceI_getLocked(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Camera_setLocked> begin_setLocked(bool locked, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setLocked(locked, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setLocked(bool locked, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setLocked(locked, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setLocked(bool locked, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setLocked(locked, context, callback, cookie, false);
        }

        public void end_setLocked(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLocked_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Camera_setLocked> begin_setLocked(bool iceP_locked, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Camera_setLocked, object>(
                (Callback_Camera_setLocked cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setLocked_name, cookie, completedCallback);
            _iceI_setLocked(iceP_locked, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CameraPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CameraPrx r = b as CameraPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CameraPrxHelper h = new CameraPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CameraPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CameraPrx r = b as CameraPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CameraPrxHelper h = new CameraPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CameraPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CameraPrxHelper h = new CameraPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CameraPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CameraPrxHelper h = new CameraPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CameraPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CameraPrx r = b as CameraPrx;
            if(r == null)
            {
                CameraPrxHelper h = new CameraPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CameraPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CameraPrxHelper h = new CameraPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Camera",
            "::Smart::Device"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CameraPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CameraPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CameraPrxHelper result = new CameraPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Smart
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class DeviceDisp_ : global::Ice.ObjectImpl, Device
    {
        #region Slice operations

        public abstract errorCode[] getErrorCodes(global::Ice.Current current = null);

        public abstract void resetErrorCodes(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Device"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getErrorCodes(Device obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getErrorCodes(current);
            var ostr = inS.startWriteParams();
            errorCodesHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_resetErrorCodes(Device obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.resetErrorCodes(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getErrorCodes",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "resetErrorCodes"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getErrorCodes(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_resetErrorCodes(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class WeatherStationDisp_ : global::Ice.ObjectImpl, WeatherStation
    {
        #region Slice operations

        public abstract float getTemperature(global::Ice.Current current = null);

        public abstract float getHumidity(global::Ice.Current current = null);

        public abstract int getPressure(global::Ice.Current current = null);

        public abstract weatherData getWeatherData(global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, weatherData> getDailyWeather(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract errorCode[] getErrorCodes(global::Ice.Current current = null);

        public abstract void resetErrorCodes(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Device",
            "::Smart::WeatherStation"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTemperature(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTemperature(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getHumidity(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getHumidity(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getPressure(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getPressure(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getWeatherData(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getWeatherData(current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDailyWeather(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getDailyWeather(current);
            var ostr = inS.startWriteParams();
            dailyWeatherHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getDailyWeather",
            "getErrorCodes",
            "getHumidity",
            "getPressure",
            "getTemperature",
            "getWeatherData",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "resetErrorCodes"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getDailyWeather(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_getErrorCodes(this, inS, current);
                }
                case 2:
                {
                    return iceD_getHumidity(this, inS, current);
                }
                case 3:
                {
                    return iceD_getPressure(this, inS, current);
                }
                case 4:
                {
                    return iceD_getTemperature(this, inS, current);
                }
                case 5:
                {
                    return iceD_getWeatherData(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return DeviceDisp_.iceD_resetErrorCodes(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class CentralHeatingDisp_ : global::Ice.ObjectImpl, CentralHeating
    {
        #region Slice operations

        public abstract void setTemperature(float temperature, global::Ice.Current current = null);

        public abstract float getDesiredTemperature(global::Ice.Current current = null);

        public abstract void setHeatingMode(heatingMode mode, global::Ice.Current current = null);

        public abstract heatingMode getHeatingMode(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract errorCode[] getErrorCodes(global::Ice.Current current = null);

        public abstract void resetErrorCodes(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::CentralHeating",
            "::Smart::Device"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setTemperature(CentralHeating obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float iceP_temperature;
            iceP_temperature = istr.readFloat();
            inS.endReadParams();
            obj.setTemperature(iceP_temperature, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDesiredTemperature(CentralHeating obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getDesiredTemperature(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setHeatingMode(CentralHeating obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            heatingMode iceP_mode;
            iceP_mode = (heatingMode)istr.readEnum(2);
            inS.endReadParams();
            obj.setHeatingMode(iceP_mode, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getHeatingMode(CentralHeating obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getHeatingMode(current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 2);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getDesiredTemperature",
            "getErrorCodes",
            "getHeatingMode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "resetErrorCodes",
            "setHeatingMode",
            "setTemperature"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getDesiredTemperature(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_getErrorCodes(this, inS, current);
                }
                case 2:
                {
                    return iceD_getHeatingMode(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return DeviceDisp_.iceD_resetErrorCodes(this, inS, current);
                }
                case 8:
                {
                    return iceD_setHeatingMode(this, inS, current);
                }
                case 9:
                {
                    return iceD_setTemperature(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class CameraDisp_ : global::Ice.ObjectImpl, Camera
    {
        #region Slice operations

        public abstract bool setPosition(cameraPosition position, global::Ice.Current current = null);

        public abstract cameraPosition getPosition(global::Ice.Current current = null);

        public abstract bool getLocked(global::Ice.Current current = null);

        public abstract void setLocked(bool locked, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract errorCode[] getErrorCodes(global::Ice.Current current = null);

        public abstract void resetErrorCodes(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Smart::Camera",
            "::Smart::Device"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setPosition(Camera obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            cameraPosition iceP_position;
            iceP_position = new cameraPosition();
            iceP_position.ice_readMembers(istr);
            inS.endReadParams();
            var ret = obj.setPosition(iceP_position, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getPosition(Camera obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getPosition(current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getLocked(Camera obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLocked(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setLocked(Camera obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_locked;
            iceP_locked = istr.readBool();
            inS.endReadParams();
            obj.setLocked(iceP_locked, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getErrorCodes",
            "getLocked",
            "getPosition",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "resetErrorCodes",
            "setLocked",
            "setPosition"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_getErrorCodes(this, inS, current);
                }
                case 1:
                {
                    return iceD_getLocked(this, inS, current);
                }
                case 2:
                {
                    return iceD_getPosition(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return DeviceDisp_.iceD_resetErrorCodes(this, inS, current);
                }
                case 8:
                {
                    return iceD_setLocked(this, inS, current);
                }
                case 9:
                {
                    return iceD_setPosition(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
